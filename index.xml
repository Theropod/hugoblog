<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WGS84教信者 on WGS84教信者</title>
    <link>https://blog.theropod.tk/</link>
    <description>Recent content in WGS84教信者 on WGS84教信者</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 10 May 2019 13:17:45 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>2019 05 10 超微IPMI风扇调节</title>
      <link>https://blog.theropod.tk/2019/2019-05-10-%E8%B6%85%E5%BE%AEipmi%E9%A3%8E%E6%89%87%E8%B0%83%E8%8A%82/</link>
      <pubDate>Fri, 10 May 2019 13:17:45 +0800</pubDate>
      
      <guid>https://blog.theropod.tk/2019/2019-05-10-%E8%B6%85%E5%BE%AEipmi%E9%A3%8E%E6%89%87%E8%B0%83%E8%8A%82/</guid>
      <description>

&lt;h3 id=&#34;问题&#34;&gt;问题&lt;/h3&gt;

&lt;p&gt;组里分配的5年前台式，主板Supermicro X10SLM+-LN4F
服务器主板下压式风扇很小，动不动转速起飞，吵死我了，看起来需要用IPMI调节风扇曲线&lt;/p&gt;

&lt;h3 id=&#34;定义&#34;&gt;定义&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;IPMI&lt;/strong&gt; Intelligent Platform Management Interface&lt;/li&gt;

&lt;li&gt;&lt;p&gt;&lt;strong&gt;BMC&lt;/strong&gt; Baseboard Management Controller
服务器基于BMC芯片实现IPMI之功能，通过IPMI的网口来管理&lt;/p&gt;

&lt;h3 id=&#34;操作&#34;&gt;操作&lt;/h3&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;可以使用的超微软件有IPMI的命令行工具，以及GUI的IPMI View&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;首先试图在本机实现IPMI之控制，但是据查现在已经不能用本机来访问本机的IPMI接口&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;接下来试图用内网电脑来IPMI访问控制，因为IPMI访问可以设置为Dedicated,Shared,Fail Over（默认值）&lt;a href=&#34;https://serverfault.com/questions/361940/configuring-supermicro-ipmi-to-use-one-of-the-lan-interfaces-instead-of-the-ipmi&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;讨论&lt;/a&gt;,但是BIOS里面不能设置。据说是断电之后IPMI要是没插线自动分配到第一个网口，但是自己试了没有用。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;直接连线，&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>自用hugo操作记录</title>
      <link>https://blog.theropod.tk/2019/2019-03-12-%E8%87%AA%E7%94%A8hugo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</link>
      <pubDate>Tue, 12 Mar 2019 18:35:03 +0800</pubDate>
      
      <guid>https://blog.theropod.tk/2019/2019-03-12-%E8%87%AA%E7%94%A8hugo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</guid>
      <description>

&lt;h3 id=&#34;安装&#34;&gt;安装&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;在WSL上使用，github上有编译的extended的deb版本 因为要使用scss自定义格式&lt;/li&gt;
&lt;li&gt;官方教程安装 初始化目录，下载主题，新建项目等等&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;自定义&#34;&gt;自定义&lt;/h3&gt;

&lt;h4 id=&#34;config-toml相关配置&#34;&gt;config.toml相关配置&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;加了&lt;code&gt;hasCJKlanguage=true&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;各种路径&#34;&gt;各种路径&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;图片放到&lt;code&gt;static/images&lt;/code&gt;里面，先同步再引用github的地址,而主题里的很多处引用都调整了相对路径&lt;/li&gt;
&lt;li&gt;favicon 都放在static里面&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;主题调整&#34;&gt;主题调整&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;用LeaveIt主题,github上下下来后，并没有按照官方加成submodule，直接把主题的&lt;code&gt;.git&lt;/code&gt;删了，不再处理版本&lt;/li&gt;

&lt;li&gt;&lt;p&gt;_custom.scss&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;    .post-warp {
        max-width: 900px;
        .post-copyright {
        border-bottom: none;
        }    
        .post-content img {
            max-width: 100%;
        }
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;看起来舒服一点&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;main.js改一下切换出标签页之后的网页title&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;themes\Leaveit\layouts_default\single.html，增减一些模板内容&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;关于目录，在themes\Leaveit\layouts_default\baseof.html里加入&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;{{ if (gt .WordCount 400 ) }}
&amp;lt;aside&amp;gt;
    &amp;lt;header&amp;gt;
            &amp;lt;h2&amp;gt;{{.Title}}&amp;lt;/h2&amp;gt;
    &amp;lt;/header&amp;gt;
    {{ .TableOfContents }}
&amp;lt;/aside&amp;gt;
{{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此为官网上的例子，非常容易理解。WordCount这个判断要是不设置hasCJKlanguage会统计不出来。放到这个html模板是为了靠到页面边缘，不和post-wrapper一起&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;媒体查询，在media.scss里设置&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Disqus模板Hugo已经内置，申请一个Disqus Site得到shortname，作为&lt;code&gt;DisqusShortname&lt;/code&gt;放在config.toml，在single.html里面加入教程里的一行引用。但我发现disqus好像已经完全被墙了。。。只有架梯子才能评论&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Google的Analytics，注册服务得到跟踪ID之后加入网站设置，hugo提供了在hearder.html里插入的一个声明，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-html&#34;&gt;    {{ if not .Site.IsServer }}
    {{ template &amp;quot;_internal/google_analytics_async.html&amp;quot; . }}
    {{ end }}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以被谷歌检测到。之后按照谷歌的提示通过他们各种各样的检测，以及search console也可以加入。百度的这个据说很慢，先搁置。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;默认的archetypes里面是&lt;code&gt;draft:true&lt;/code&gt;也就是说用&lt;code&gt;hugo server -D&lt;/code&gt;才能看到这些drafts，而生成静态网页就忽略掉了。。。嫌麻烦直接改成true。测试可以用&lt;code&gt;hugo server -D&lt;/code&gt;的server模式，且包括标记为draft的文本）&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;写&#34;&gt;写&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;就是普通写markdown&lt;/li&gt;
&lt;li&gt;代码块要在```之后声明语言，否则会和行内的代码高亮混淆&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;github同步&#34;&gt;github同步&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;如果想用&lt;code&gt;username.github.io&lt;/code&gt;当做主页,就需要只把hugo生成的public文件夹放在&lt;code&gt;username.github.io&lt;/code&gt;的项目中（加入其他文件会生成页面失败），这样其余的文件必须再新建另一个项目来保存。即：Hugo文件夹是一个项目，每次生成的public作为submodule放在使用用户名作为地址的项目。&lt;/li&gt;
&lt;li&gt;但我本来就有域名，所以不需要非得用&lt;code&gt;username.github.io&lt;/code&gt;这个

&lt;ul&gt;
&lt;li&gt;Hugo文件夹git init，add remote，pull下来一个github空项目，配置好博客内容，生成public目录。&lt;/li&gt;
&lt;li&gt;先把github pages里域名设置成自己的（这里我的freenom DNS会失败，换成cloudflare的才能被github认出来），否则网站主题模板找根路径会有问题，毕竟根目录本来是个人域名下的一个项目&lt;/li&gt;
&lt;li&gt;config.toml里设置到Github Pages的publish 地址。这里我用的是&lt;code&gt;blog.therpod.tk&lt;/code&gt;，于是在cloudflare里只配置了一个CNAME,指向&lt;code&gt;theropod.github.io&lt;/code&gt;。&lt;/li&gt;
&lt;li&gt;在github pages里面开启https后，提示&lt;code&gt;NET::ERR_CERT_COMMON_NAME_INVALID github pages&lt;/code&gt;，感觉像是github.com发的证书仍没有和我的域名联系起来。我在cloudflare里又加上了A记录，直接用ip地址，https就好了。
&lt;img src=&#34;https://raw.githubusercontent.com/Theropod/hugoblog/master/static/images/blog_images/2019-03-12-%E8%87%AA%E7%94%A8hugo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95-02.png&#34; alt=&#34;image&#34; /&gt;&lt;/li&gt;
&lt;li&gt;接下来就是按照官方文档里说的，只把public文件夹用&lt;code&gt;git worktree&lt;/code&gt;弄到一个新的gh-pages分支，选择这个分支作为主页就行了。注意官方文档的upstream指的是你自己上游的名字，比如origin。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;最后就是修改下官网上发布脚本的例子了。正好vscode里面可以把terminal改成是wsl的bash.exe，写和发布可以在一起进行。手动最后一道检查，没有把Push到github加进去。

&lt;ul&gt;
&lt;li&gt;注意这个脚本里Push的是新生成的Public，github的相应分支里的CNAME和README这些要重新放进去，否则每次传完都要重新配置&lt;/li&gt;
&lt;li&gt;还有就是注意VSCode把脚本CRLF转成LF。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;vscode里没法push gh-pages目录，提示说已经在WSL的子系统里checkout过了。索性加入WSL的ssh key，在terminal里用ssh push。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/bin/sh
DIR=$(dirname &amp;quot;$0&amp;quot;)
cd $DIR/..

if [[ $(git status -s) ]]
then
    echo &amp;quot;The working directory is dirty. Please commit any pending changes.&amp;quot;
    exit 1;
fi

echo &amp;quot;Deleting old publication&amp;quot;
rm -rf public
mkdir public
git worktree prune
rm -rf .git/worktrees/public/

echo &amp;quot;Checking out gh-pages branch into public&amp;quot;
git worktree add -B gh-pages public origin/gh-pages

echo &amp;quot;Removing existing files&amp;quot;
rm -rf public/*

echo &amp;quot;Generating site&amp;quot;
hugo

echo &amp;quot;Adding files&amp;quot;
cp CNAME public
cp gh-pages-README.md public/README.md

echo &amp;quot;Updating gh-pages branch&amp;quot;
cd public &amp;amp;&amp;amp; git add --all &amp;amp;&amp;amp; git commit -m &amp;quot;Publishing to gh-pages (publish.sh)&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vscode一站式解决&#34;&gt;VSCode一站式解决&lt;/h3&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/Theropod/hugoblog/master/static/images/blog_images/2019-03-12-%E8%87%AA%E7%94%A8hugo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95-01.png&#34; alt=&#34;image&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>VSCode中PlantUML流程图</title>
      <link>https://blog.theropod.tk/2019/2019-03-12-vscode%E4%B8%ADplantuml%E6%B5%81%E7%A8%8B%E5%9B%BE/</link>
      <pubDate>Tue, 12 Mar 2019 18:34:50 +0800</pubDate>
      
      <guid>https://blog.theropod.tk/2019/2019-03-12-vscode%E4%B8%ADplantuml%E6%B5%81%E7%A8%8B%E5%9B%BE/</guid>
      <description>

&lt;h4 id=&#34;需要安装&#34;&gt;需要安装&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;Markdown Preview Enhanced插件&lt;/li&gt;
&lt;li&gt;jdk并且配置了环境变量&lt;/li&gt;
&lt;li&gt;PlantUML Preview插件（非必需，只是用来预览放大测试PlantUML类型的流程图&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;注释&#34;&gt;注释&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;网上不少说需要安装graphviz这个程序的，其实不需要&lt;/li&gt;
&lt;li&gt;jdk环境变量没设置好的话，两个插件都不能用&lt;/li&gt;
&lt;li&gt;Markdown Preview Enhanced支持很多种的流程图 PlantUML Mermaid等等很多种，看文档就可以上手，但是注意PlantUML的部分要放到专门的代码块里声明&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>